{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MI\\\\Desktop\\\\financial tracker 13-02-24\\\\src\\\\Navbar\\\\CustomizableDateModule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst monthsOfYear = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst CustomizableDateModule = _ref => {\n  _s();\n  let {\n    format = \"ddd, MMM D, YYYY\"\n  } = _ref;\n  const [currentDate, setCurrentDate] = useState(new Date());\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentDate(new Date());\n    }, 1000 * 60); // Update every minute\n\n    return () => clearInterval(intervalId);\n  }, []);\n  const formatDate = () => {\n    const dayOfWeek = daysOfWeek[currentDate.getDay()];\n    const month = monthsOfYear[currentDate.getMonth()];\n    const dayOfMonth = currentDate.getDate();\n    const year = currentDate.getFullYear();\n    const formattedDate = format.replace(\"ddd\", dayOfWeek).replace(\"MMM\", month).replace(\"D\", dayOfMonth).replace(\"YYYY\", year);\n    return formattedDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: formatDate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomizableDateModule, \"zLLOHWi+1oI1QEyVIaMRDWNuVqU=\");\n_c = CustomizableDateModule;\nexport default CustomizableDateModule;\nvar _c;\n$RefreshReg$(_c, \"CustomizableDateModule\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","daysOfWeek","monthsOfYear","CustomizableDateModule","_ref","_s","format","currentDate","setCurrentDate","Date","intervalId","setInterval","clearInterval","formatDate","dayOfWeek","getDay","month","getMonth","dayOfMonth","getDate","year","getFullYear","formattedDate","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/MI/Desktop/financial tracker 13-02-24/src/Navbar/CustomizableDateModule.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\nconst monthsOfYear = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\nconst CustomizableDateModule = ({ format = \"ddd, MMM D, YYYY\" }) => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setCurrentDate(new Date());\r\n    }, 1000 * 60); // Update every minute\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const formatDate = () => {\r\n    const dayOfWeek = daysOfWeek[currentDate.getDay()];\r\n    const month = monthsOfYear[currentDate.getMonth()];\r\n    const dayOfMonth = currentDate.getDate();\r\n    const year = currentDate.getFullYear();\r\n\r\n    const formattedDate = format\r\n      .replace(\"ddd\", dayOfWeek)\r\n      .replace(\"MMM\", month)\r\n      .replace(\"D\", dayOfMonth)\r\n      .replace(\"YYYY\", year);\r\n\r\n    return formattedDate;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>{formatDate()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomizableDateModule;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AACpE,MAAMC,YAAY,GAAG,CACnB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,CACN;AAED,MAAMC,sBAAsB,GAAGC,IAAA,IAAqC;EAAAC,EAAA;EAAA,IAApC;IAAEC,MAAM,GAAG;EAAmB,CAAC,GAAAF,IAAA;EAC7D,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;EAE1DX,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCH,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;;IAEf,OAAO,MAAMG,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,SAAS,GAAGb,UAAU,CAACM,WAAW,CAACQ,MAAM,CAAC,CAAC,CAAC;IAClD,MAAMC,KAAK,GAAGd,YAAY,CAACK,WAAW,CAACU,QAAQ,CAAC,CAAC,CAAC;IAClD,MAAMC,UAAU,GAAGX,WAAW,CAACY,OAAO,CAAC,CAAC;IACxC,MAAMC,IAAI,GAAGb,WAAW,CAACc,WAAW,CAAC,CAAC;IAEtC,MAAMC,aAAa,GAAGhB,MAAM,CACzBiB,OAAO,CAAC,KAAK,EAAET,SAAS,CAAC,CACzBS,OAAO,CAAC,KAAK,EAAEP,KAAK,CAAC,CACrBO,OAAO,CAAC,GAAG,EAAEL,UAAU,CAAC,CACxBK,OAAO,CAAC,MAAM,EAAEH,IAAI,CAAC;IAExB,OAAOE,aAAa;EACtB,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,eACExB,OAAA;MAAAwB,QAAA,EAAIX,UAAU,CAAC;IAAC;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV,CAAC;AAACvB,EAAA,CA/BIF,sBAAsB;AAAA0B,EAAA,GAAtB1B,sBAAsB;AAiC5B,eAAeA,sBAAsB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}